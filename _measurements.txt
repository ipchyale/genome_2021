-we are searching for legacy measurement files

 -most thickness measurements in database are from GCI study

 -"gloss" and "Gloss?" columns in database do not match
 
 -may be that "Gloss?" checkboxes for some gloss-measured papers were left unchecked

 -"gloss.xlsx" raw file contains 1550 unique catalog numbers, and there are 1551 non-null values in "Gloss?" column, but union set is much larger than intersection

 -"gloss.xlsx" also contains many catalog numbers that do not exist in database
 
 -need to be checked for 'primary' catalog number neighbors (idea is that secondary numbers are wrong)

-not all measurements use the [catalog]_[manbran] format
 -some omit the manbran
 -some have it, but have the order backwards

-sometimes entire catalog numbers, including the manbran suffix, occur in more than one binder (referring to texture images here). That's either impossible, or a weird fact about the binders we need to address.


TEXTURE
-texture images, and their pre-processed counterparts, live on the server share, put there by Jack
 -Jack is trying to see whether we can go without pre-processing for glyph values
  -seems very possible using simple center crop
 -Standard Deviation (together with some bandpass and norm) is a great approximation of surface roughness
 -a core problem is that surface topography is not always captured accurately by raking light to pixel brightness pipeline
  -sometimes scope's resolution simply can't resolve a fine texture
  -sometimes a pocked film will mean a weird surface topography that may not reflect what we're interested in, which is PAPER topography
  -sometimes our capture-processing pipeline react to optical phenomenon that aren't surface topography related (like metallic silver papers)

-I've converted many to JPG for display purposes, using native Mac tools for conversion
 
 ``$ open *.tif -a ~/Desktop/TIFF2JPG.app``

 -sometimes this needs to be run a few times in a folder, because a large queue of files will sometimes choke it

-tiles were created by sp.py (in Yente utils), using Nick's scripts

-for texture files, there are a number of things to check:
 -NN
  -by tile pairs (this is what Yente will probably switch to)
   -could do closest tile pair AFTER removing outliers (especially artifact outliers)
  -by trial
  -by catalog (average across all tiles)
  -by representative
   -trial as rep
   -tile as rep *(this is what yente does)
 -medians to reduce outliers?
 -synthesize images from averaged parameters? (probably not)
  -though this could help eliminate outliers, like when a black speck of dust is visible
   -outliers like these, and other issues like flat field artifacts (e.g., corner vignetting) exert too much influence on neighbor search, and make results seem worse because the artifact takes priority over the mainfield texture
 -Yente app
  -chooses a vector rep by finding the tile closest to the centroid for all tiles in a pocket
  -chooses an 'image' rep by selecting the image with the highest tile centrality 